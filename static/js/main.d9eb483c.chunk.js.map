{"version":3,"sources":["components/CreateNewUser/index.tsx","components/SwitchLanguagesButtons/index.tsx","components/Header/index.tsx","components/CreateNewUserButton/index.tsx","components/PageHeader/index.tsx","components/UsersList/index.tsx","components/UserDetails/index.tsx","App.tsx","i18n/config.ts","index.tsx"],"names":["Positions","languages","en","nativeName","languageCode","es","SwitchLanguagesButtons","i18n","useTranslation","className","Object","keys","map","language","type","onClick","changeLanguage","aria-label","Header","to","CreateNewUserButton","PageHeader","title","showButton","UsersList","useState","users","setUsers","currentPage","setCurrentPage","totalPages","setTotalPages","t","a","fetch","response","json","data","page","total_pages","useEffect","fetchUsers","arrayTotalPages","i","push","user","id","first_name","last_name","pageNumber","UserDetails","setUser","useParams","console","log","src","avatar","alt","email","minDate","Date","setFullYear","getFullYear","CreateNewUserSchema","Yup","shape","firstName","matches","required","lastName","date","max","url","method","headers","body","JSON","stringify","CreateNewUser","savedData","setSavedData","initialValues","position","validationSchema","onSubmit","values","setSubmitting","postNewUser","then","catch","error","errors","touched","handleChange","name","placeholder","onChange","value","label","disabled","hidden","SoftwareEngineer","Painter","BusDriver","App","path","resources","translation","use","initReactI18next","init","lng","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9eb483c.chunk.js","sourcesContent":["// https://formik.org/docs/guides/typescript\n\n// https://formik.org/docs/examples/typescript\n\n// https://formik.org/docs/guides/validation\n// https://github.com/jquense/yup#api\n\n// https://www.npmjs.com/package/react-date-picker\n\nimport { useState } from \"react\";\n\nimport { Formik, FormikHelpers, FormikProps, Form, Field } from \"formik\";\n\n//Yup for form validation\nimport * as Yup from \"yup\";\n\n//components\nimport PageHeader from \"../PageHeader\";\n\n//styles\nimport \"./CreateNewUser.scss\";\n\nconst minDate = new Date();\nminDate.setFullYear(minDate.getFullYear() - 18);\n\ninterface FormValues {\n  firstName: string;\n  lastName: string;\n  position: string;\n  date: Date | string;\n}\n\nenum Positions {\n  SoftwareEngineer = \"Software Engineer\",\n  Painter = \"Painter\",\n  BusDriver = \"Bus driver\",\n}\n\n//https://stackoverflow.com/questions/51222559/formik-yup-form-validation-not-working-as-expected-with-virtualizedselect\n// https://github.com/jquense/yup#mixednullableisnullable-boolean--true-schema\nconst CreateNewUserSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .matches(/^[a-z\\s]+$/i, \"Only latin craracters pls\")\n    .required(\"Required\"),\n  lastName: Yup.string()\n    .matches(/^[a-z\\s]+$/i, \"Only latin craracters pls\")\n    .required(\"Required\"),\n  date: Yup.date()\n    .max(minDate, \"Sorry you must be 18 years old\")\n    .required(\"Required\"),\n});\n\n//https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options\nasync function postNewUser(url: string, data: FormValues): Promise<Object> {\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(data),\n  });\n  return response.json();\n}\n\nconst CreateNewUser = () => {\n  const [savedData, setSavedData] = useState(null as Object | null);\n\n  const initialValues: FormValues = {\n    firstName: \"\",\n    lastName: \"\",\n    position: \"\",\n    date: \"\",\n  };\n  return (\n    <div className=\"wrapper\">\n      <PageHeader title={\"Create New User\"} showButton={false} />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={CreateNewUserSchema}\n        onSubmit={(\n          values: FormValues,\n          { setSubmitting }: FormikHelpers<FormValues>\n        ) => {\n          postNewUser(\"https://reqres.in/api/users/\", values)\n            .then((data) => {\n              setSavedData(data);\n              console.log(data);\n            })\n            .catch((error) => console.error(error));\n          setSubmitting(false);\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n        }: FormikProps<FormValues>) => (\n          <Form>\n            <label>\n              First Name:\n              <Field\n                name=\"firstName\"\n                placeholder=\"enter your first name\"\n                required\n              />\n              {errors.firstName && touched.firstName && (\n                <div>{errors.firstName}</div>\n              )}\n            </label>\n            <br />\n            <label>\n              Last Name:\n              <Field\n                className={errors.lastName && touched.lastName ? \"red\" : null}\n                name=\"lastName\"\n                placeholder=\"enter your last name\"\n                required\n              />\n              {errors.lastName && touched.lastName ? (\n                <div>{errors.lastName}</div>\n              ) : null}\n            </label>\n            <br />\n\n            <label>\n              Occupation\n              {/* https://codesandbox.io/s/vxv6q4z5?file=/index.js:943-949 */}\n              <select\n                onChange={handleChange}\n                name=\"position\"\n                value={values.position}\n                required\n              >\n                <option value=\"\" label=\"Select occupation\" disabled hidden />\n                <option value={Positions.SoftwareEngineer}>\n                  {Positions.SoftwareEngineer}\n                </option>\n                <option value={Positions.Painter}>{Positions.Painter}</option>\n                <option value={Positions.BusDriver}>\n                  {Positions.BusDriver}\n                </option>\n              </select>\n            </label>\n            <br />\n\n            <label>\n              Date of Birth:\n              <Field\n                required\n                type=\"date\"\n                name=\"date\"\n                className={`date-picker ${errors.date ? \"red\" : \"green\"}`}\n              />\n              {errors.date && touched.date ? <div>{errors.date}</div> : null}\n            </label>\n\n            <br />\n            <button type=\"submit\">Submit</button>\n          </Form>\n        )}\n      </Formik>\n      {savedData && <div>Response result: {JSON.stringify(savedData)}</div>}\n    </div>\n  );\n};\n\nexport default CreateNewUser;\n\n// https://medium.com/flyparakeet/react-formik-styled-components-add78b37971f\n\n// https://formik.org/docs/guides/validation\n// https://github.com/jquense/yup#api\n\n// https://www.npmjs.com/package/react-date-picker\n\n// https://formik.org/docs/guides/validation\n","//styles\nimport \"./SwitchLanguagesButtons.scss\";\n\nimport { useTranslation } from \"react-i18next\";\n\nconst languages: { [key: string]: { [key: string]: string } } = {\n  en: { nativeName: \"English\", languageCode: \"en\" },\n  es: { nativeName: \"Spanish\", languageCode: \"es\" },\n};\n\nconst SwitchLanguagesButtons = () => {\n  const { i18n } = useTranslation();\n  return (\n    <div className=\"switch-languages\">\n      {Object.keys(languages).map((language) => (\n        <button\n          key={language}\n          type=\"submit\"\n          onClick={() => i18n.changeLanguage(language)}\n          className={`switch-languages__language-button ${languages[language].languageCode}`}\n          aria-label={`change page language to ${languages[language].nativeName}`}\n        ></button>\n      ))}\n    </div>\n  );\n};\n\nexport default SwitchLanguagesButtons;\n","// router\nimport { Link } from \"react-router-dom\";\n// styles\nimport \"./Header.scss\";\n// components\nimport SwitchLanguagesButtons from \"../SwitchLanguagesButtons\";\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <div className=\"header__wrapper\">\n        <Link to=\"/\">\n          <h1>Fetch them all</h1>\n        </Link>\n        <SwitchLanguagesButtons />\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\n// Router\nimport { Link } from \"react-router-dom\";\n\n// Icons\nimport { AiFillPlusCircle } from \"react-icons/ai\";\n\n//styles\nimport './CreateNewUserButton.scss';\n\nconst CreateNewUserButton = () => {\n  return (\n      <Link to=\"/create-new-user\">\n        <button className=\"create-new-user-button\">\n          <AiFillPlusCircle className=\"plus-icon\" />\n          Create New User\n        </button>\n      </Link>\n  );\n};\n\nexport default CreateNewUserButton;\n","import React from \"react\";\n\nimport CreateNewUserButton from \"../CreateNewUserButton\";\n\nimport \"./PageHeader.scss\";\n\ntype PageHeaderProps = {\n  title: string;\n  showButton: boolean;\n};\n\nconst PageHeader = ({ title, showButton }: PageHeaderProps) => {\n  return (\n    <div className=\"users-header\">\n      <h2>{title}</h2>\n      {showButton && <CreateNewUserButton />}\n    </div>\n  );\n};\n\nexport default PageHeader;\n","import { useState, useEffect } from \"react\";\n\n// Router\nimport { Link } from \"react-router-dom\";\n\n//components\nimport PageHeader from \"../PageHeader\";\n\n// Icons\nimport { RiArrowRightSLine } from \"react-icons/ri\";\n\n// Styles\nimport \"./UsersList.scss\";\n\n//multilanguage\nimport { useTranslation } from \"react-i18next\";\n\ntype UserType = {\n  id: number;\n  email: string;\n  first_name: string;\n  last_name: string;\n  avatar: string;\n};\n\nconst UsersList = () => {\n  const [users, setUsers] = useState<UserType[]>([]);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [totalPages, setTotalPages] = useState<number>(1);\n  const { t } = useTranslation();\n\n  // TODO: Вынести в utilitis! Использовать axios можно. Возвращать просто json\n  async function fetchUsers(currentPage: number) {\n    const response = await fetch(\n      `https://reqres.in/api/users?page=${currentPage}`\n    );\n    const json = await response.json();\n    setUsers(json.data);\n    setCurrentPage(json.page);\n    setTotalPages(json.total_pages);\n  }\n\n  useEffect(() => {\n    fetchUsers(currentPage);\n  }, [currentPage]);\n\n  const arrayTotalPages: Array<number> = [];\n\n  for (let i = 1; i <= totalPages; i++) {\n    arrayTotalPages.push(i);\n  }\n\n  return (\n    <main>\n      <div className=\"wrapper\">\n        <PageHeader title={t(\"description.part2\")} showButton={true} />\n        <div className=\"users-list\">\n          {users.map((user) => (\n            <Link\n              to={`/user/${user.id}`}\n              className=\"users-list__user\"\n              key={user.id}\n            >\n              <span className=\"users-list__name\">\n                {user.first_name} {user.last_name}\n              </span>\n              <RiArrowRightSLine />\n              {t(\"description.part1\")}\n            </Link>\n          ))}\n        </div>\n      </div>\n      {/* TODO: Пагинацию в отдельный компонент */}\n      <div>\n        <ul className=\"pagination\">\n          {arrayTotalPages.map((pageNumber: number) => (\n            <li key={pageNumber}>\n              <button onClick={() => setCurrentPage(pageNumber)}>\n                {pageNumber}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </main>\n  );\n};\n\nexport default UsersList;\n","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n//components\nimport PageHeader from \"../PageHeader\";\n\n//styles\nimport \"./UserDetails.scss\";\n\ntype RouteParams = {\n  id: string;\n};\n\ntype UserType = {\n  id: number;\n  email: string;\n  first_name: string;\n  last_name: string;\n  avatar: string;\n};\n\nconst UserDetails = () => {\n  const [user, setUser] = useState({} as UserType);\n  let { id } = useParams<RouteParams>();\n\n  async function fetchUsers(id: string) {\n    const response = await fetch(`https://reqres.in/api/users/${id}`);\n    const json = await response.json();\n    setUser(json.data);\n  }\n\n  useEffect(() => {\n    fetchUsers(id);\n  }, [id]);\n\n  console.log(user);\n\n  return (\n    <div className=\"wrapper\">\n      <PageHeader title={\"User Details\"} showButton={true} />\n      <div className=\"user-details\">\n        <img src={user.avatar} alt={user?.first_name} />\n        <p>{user.first_name}</p>\n        <p>{user.last_name}</p>\n        <p>{user.email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default UserDetails;\n","// Router\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n//components\nimport Header from \"./components/Header\";\nimport UsersList from \"./components/UsersList\";\nimport UserDetails from \"./components/UserDetails\";\nimport CreateNewUser from \"./components/CreateNewUser\";\n\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route path=\"/user/:id\">\n          <UserDetails />\n        </Route>\n        <Route path=\"/create-new-user\">\n          <CreateNewUser />\n        </Route>\n        <Route path=\"/\">\n          <UsersList />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport EnglishTranslation from \"./en/english-translation.json\";\nimport SpanishTranslation from \"./es/spanish-translation.json\";\n\nexport const resources = {\n  en: { translation: EnglishTranslation },\n  es: { translation: SpanishTranslation },\n};\n\ni18n.use(initReactI18next).init({\n  // debug: true,\n  lng: \"en\",\n  resources,\n});\n\nexport default i18n;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/main.scss\";\nimport App from \"./App\";\n\n// multi language framework react-i18next\nimport \"./i18n/config\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}